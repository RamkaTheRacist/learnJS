Оператор || выполняет следующие действия:
1)Вычисляет операнды слева направо.
2)Каждый операнд конвертирует в логическое значение. Если результат true, останавливается и возвращает исходное значение этого операнда.
3)Если все операнды являются ложными (false), возвращает последний из них.

Операндами могут быть как отдельные значения, так и произвольные выражения. ИЛИ || вычисляет их слева направо. 
Вычисление останавливается при достижении первого истинного значения. Этот процесс называется «сокращённым вычислением», поскольку второй операнд вычисляется только в том случае, 
если первого недостаточно для вычисления всего выражения.

Это хорошо заметно, когда выражение, указанное в качестве второго аргумента, имеет побочный эффект, например, изменение переменной.

В приведённом ниже примере x не изменяется:

let x;

true || (x = 1);

alert(x); // undefined, потому что (x = 1) не вычисляется
Если бы первый аргумент имел значение false, то || приступил бы к вычислению второго и выполнил операцию присваивания:

let x;

false || (x = 1);

alert(x); // 1
Присваивание – лишь один пример. Конечно, могут быть и другие побочные эффекты, которые не проявятся, если вычисление до них не дойдёт.
Как мы видим, этот вариант использования || является "аналогом if". Первый операнд преобразуется в логический. Если он оказывается ложным, начинается вычисление второго.
В большинстве случаев лучше использовать «обычный» if, чтобы облегчить понимание кода, но иногда это может быть удобно.

//////////////////////////////////////////
Оператор && выполняет следующие действия:
1)Вычисляет операнды слева направо.
2)Каждый операнд преобразует в логическое значение. Если результат false, останавливается и возвращает исходное значение этого операнда.
3)Если все операнды были истинными, возвращается последний.

Как и оператор ИЛИ ||, И && иногда может заменять if.
/////////////////////////////////////////
Оператор "!":

Оператор принимает один аргумент и выполняет следующие действия:
1)Сначала приводит аргумент к логическому типу true/false.
2)Затем возвращает противоположное значение.

(!)В частности, двойное НЕ !! используют для преобразования значений к логическому типу

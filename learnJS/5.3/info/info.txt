(!)В JavaScript любые текстовые данные являются строками. Не существует отдельного типа «символ», который есть в ряде других языков.
(!)Внутренний формат для строк — всегда UTF-16, вне зависимости от кодировки страницы.
(!)Одинарные и двойные кавычки работают, по сути, одинаково, а если использовать обратные кавычки, то в такую строку мы сможем вставлять произвольные выражения, обернув их в ${…}
(!)Ещё одно преимущество обратных кавычек — они могут занимать более одной строки
/////////////////////////////////////////////////////////////////////////////////
// перевод строки добавлен с помощью символа перевода строки
let str1 = "Hello\nWorld";

// многострочная строка, созданная с использованием обратных кавычек
let str2 = `Hello
World`;
/////////////////////////////////////////////////////////////////////////////////
Символ	    Описание
\n	        Перевод строки
\r	        В текстовых файлах Windows для перевода строки используется комбинация символов \r\n, а на других ОС это просто \n. ПО под Windows обычно понимает и просто \n.
\', \"	    Кавычки
\\	        Обратный слеш
\t	        Знак табуляции
\b, \f, \v	Backspace, Form Feed и Vertical Tab — оставлены для обратной совместимости, сейчас не используются.
//////////////////////////////////////////////////////////////////////////////////
(!)Бывает так, что люди с практикой в других языках случайно пытаются вызвать его, добавляя круглые скобки: они пишут str.length() вместо str.length. Это не работает.
//////////////////////////////////////////////////////////////////////////////////
Получить символ, который занимает позицию pos, можно с помощью квадратных скобок: [pos]. Также можно использовать метод str.at(pos). Первый символ занимает нулевую позицию:

let str = `Hello`;

// получаем первый символ
alert( str[0] ); // H
alert( str.at(0) ); // H

// получаем последний символ
alert( str[str.length - 1] ); // o
alert( str.at(-1) );
////////////////////////////////////////////////////////////////////////////////
for (let char of "Hello") {
  alert(char); // H,e,l,l,o (char — сначала "H", потом "e", потом "l" и т.д.)
}
///////////////////////////////////////////////////////////////////////////////
(!)Строки неизменяемы
//////////////////////////////////////////////////////////////////////////////
Методы toLowerCase() и toUpperCase() меняют регистр символов:

alert( 'Interface'.toUpperCase() ); // INTERFACE
alert( 'Interface'.toLowerCase() ); // interface
Если мы захотим перевести в нижний регистр какой-то конкретный символ:

alert( 'Interface'[0].toLowerCase() ); // 'i'
//////////////////////////////////////////////////////////////////////////////
(!)str.indexOf(substr, pos).
Он ищет подстроку substr в строке str, начиная с позиции pos, и возвращает позицию, на которой располагается совпадение, либо -1 при отсутствии совпадений.

(!)Также есть похожий метод str.lastIndexOf(substr, position), который ищет с конца строки к её началу.
/////////////////////////////////////////////////////////////////////////////
Существует старый трюк с использованием побитового оператора НЕ — ~. Он преобразует число в 32-разрядное целое со знаком (signed 32-bit integer). Дробная часть, в случае, 
если она присутствует, отбрасывается. Затем все биты числа инвертируются.

На практике это означает простую вещь: для 32-разрядных целых чисел значение ~n равно -(n+1).

В частности:

alert( ~2 ); // -3, то же, что -(2+1)
alert( ~1 ); // -2, то же, что -(1+1)
alert( ~0 ); // -1, то же, что -(0+1)
alert( ~-1 ); // 0, то же, что -(-1+1)
Таким образом, ~n равняется 0 только при n == -1 (для любого n, входящего в 32-разрядные целые числа со знаком).

Соответственно, прохождение проверки if ( ~str.indexOf("…") ) означает, что результат indexOf отличен от -1, совпадение есть.

Это иногда применяют, чтобы сделать проверку indexOf компактнее:

let str = "Widget";

if (~str.indexOf("Widget")) {
  alert( 'Совпадение есть' ); // работает
}
Впрочем, если быть точнее, из-за того, что большие числа обрезаются до 32 битов оператором ~, существуют другие числа, для которых результат тоже будет 0, 
самое маленькое из которых — ~4294967295=0. Поэтому такая проверка будет правильно работать только для строк меньшей длины.
/////////////////////////////////////////////////////////////////////////////
Более современный метод str.includes(substr, pos) возвращает true, если в строке str есть подстрока substr, либо false, если нет.

Это — правильный выбор, если нам необходимо проверить, есть ли совпадение, но позиция не нужна:

alert( "Widget with id".includes("Widget") ); // true

alert( "Hello".includes("Bye") ); // false
Необязательный второй аргумент str.includes позволяет начать поиск с определённой позиции:

alert( "Midget".includes("id") ); // true
alert( "Midget".includes("id", 3) ); // false, поиск начат с позиции 3
Методы str.startsWith и str.endsWith проверяют, соответственно, начинается ли и заканчивается ли строка определённой строкой:

alert( "Widget".startsWith("Wid") ); // true, "Wid" — начало "Widget"
alert( "Widget".endsWith("get") ); // true, "get" — окончание "Widget"
//////////////////////////////////////////////////////////////////////////////
В JavaScript есть 3 метода для получения подстроки: substring, substr и slice.

(!)str.slice(start [, end]) - Возвращает часть строки от start до (не включая) end.
(!)Если аргумент end отсутствует, slice возвращает символы до конца строки:
(!)Также для start/end можно задавать отрицательные значения. Это означает, что позиция определена как заданное количество символов с конца строки:
///////////////////////////////////////////////////////////////////////////////
(!)str.substring(start [, end]) - Возвращает часть строки между start и end (не включая) end.
(!)Это — почти то же, что и slice, но можно задавать start больше end.
Если start больше end, то метод substring сработает так, как если бы аргументы были поменяны местами.
(!)Отрицательные значения substring, в отличие от slice, не поддерживает, они интерпретируются как 0.
//////////////////////////////////////////////////////////////////////////////
(!)str.substr(start [, length]) - Возвращает часть строки от start длины length.
(!)Значение первого аргумента может быть отрицательным, тогда позиция определяется с конца
//////////////////////////////////////////////////////////////////////////////
Сравнение строк:
1)Строчные буквы больше заглавных:
alert( 'a' > 'Z' ); // true
2)Буквы, имеющие диакритические знаки, идут «не по порядку»:
alert( 'Österreich' > 'Zealand' ); // true
//////////////////////////////////////////////////////////////////////////////
(!)str.codePointAt(pos) - Возвращает код для символа, находящегося на позиции pos
(!)String.fromCodePoint(code) - Создаёт символ по его коду code
//////////////////////////////////////////////////////////////////////////////
Вызов str.localeCompare(str2) возвращает число, которое показывает, какая строка больше в соответствии с правилами языка:
1)Отрицательное число, если str меньше str2.
2)Положительное число, если str больше str2.
3)0, если строки равны.
Например:
alert( 'Österreich'.localeCompare('Zealand') ); // -1
(!)У этого метода есть два дополнительных аргумента, которые указаны в документации. Первый позволяет указать язык (по умолчанию берётся из окружения) — от него 
зависит порядок букв. Второй — определить дополнительные правила, такие как чувствительность к регистру, а также следует ли учитывать различия между "a" и "á".
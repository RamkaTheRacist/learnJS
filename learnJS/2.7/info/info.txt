(!)Конкатенация строк
alert(2 + 2 + '1' ); // будет "41", а не "221"
///////////////////////
(!)Унарный "+"
let apples = "2";
let oranges = "3";
// оба операнда предварительно преобразованы в числа
alert( +apples + +oranges ); // 5
// более длинный вариант
// alert( Number(apples) + Number(oranges) ); // 5
///////////////////////
Вызов x = value записывает value в x и возвращает его.
let a = 1;
let b = 2;
let c = 3 - (a = b + 1);    //не рекомендуется
alert( a ); // 3
alert( c ); // 0
///////////////////////
(!)Побитовые операторы работают с 32-разрядными целыми числами (при необходимости приводят к ним), на уровне их внутреннего двоичного представления.
AND(и) ( & )
OR(или) ( | )
XOR(побитовое исключающее или) ( ^ )
NOT(не) ( ~ )
LEFT SHIFT(левый сдвиг) ( << )
RIGHT SHIFT(правый сдвиг) ( >> )
ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )
////////////////////////
Оператор (,) предоставляет нам возможность вычислять несколько выражений, разделяя их запятой ,. Каждое выражение выполняется, но возвращается результат только последнего.

Например:
let a = (1 + 2, 3 + 4);
alert( a ); // 7 (результат вычисления 3 + 4)
Первое выражение 1 + 2 выполняется, а результат отбрасывается. Затем идёт 3 + 4, выражение выполняется и возвращается результат.

(!)Пожалуйста, обратите внимание, что оператор , имеет очень низкий приоритет, ниже =, поэтому скобки важны в приведённом выше примере.

Без них в "a = 1 + 2, 3 + 4" сначала выполнится +, суммируя числа в "a = 3, 7", затем оператор присваивания = присвоит "a = 3", а то, что идёт дальше, будет игнорировано. 
Всё так же, как в (a = 1 + 2), 3 + 4.

Иногда оператор используют в составе более сложных конструкций, чтобы сделать несколько действий в одной строке.

Например:
// три операции в одной строке
for (a = 1, b = 3, c = a * b; a < 10; a++) {
 ...
}

Основной концепцией управления памятью в JavaScript является принцип достижимости.

Если упростить, то «достижимые» значения – это те, которые доступны или используются. Они гарантированно находятся в памяти.

1)Существует базовое множество достижимых значений, которые не могут быть удалены.

Например:

*Выполняемая в данный момент функция, её локальные переменные и параметры.
*Другие функции в текущей цепочке вложенных вызовов, их локальные переменные и параметры.
*Глобальные переменные.
*(некоторые другие внутренние значения)
(!)Эти значения мы будем называть корнями.

2)Любое другое значение считается достижимым, если оно доступно из корня по ссылке или по цепочке ссылок.

Например, если в глобальной переменной есть объект, и он имеет свойство, в котором хранится ссылка на другой объект, то этот объект считается достижимым. 
И те, на которые он ссылается, тоже достижимы. Далее вы познакомитесь с подробными примерами на эту тему.
/////////////////////////////////////////////////////////
// в user находится ссылка на объект
let user = {
  name: "John"
};

Если перезаписать значение user, то ссылка потеряется:

user = null;

Теперь объект John становится недостижимым. К нему нет доступа, на него нет ссылок. Сборщик мусора удалит эти данные и освободит память.
///////////////////////////////////////////////////////////
function marry(man, woman) {
  woman.husband = man;
  man.wife = woman;

  return {
    father: man,
    mother: woman
  }
}

let family = marry({
  name: "John"
}, {
  name: "Ann"
});
//удалим обе входящие ссылки на объект
delete family.father;
delete family.mother.husband;

И удаляется сам объект потому, что на него никто не ссылается
////////////////////////////////////////////////////////////
Возьмём объект family из примера выше. А затем:

family = null;

Объекты John и Ann всё ещё связаны, оба имеют входящие ссылки, но этого недостаточно.

Бывший объект family был отсоединён от корня, на него больше нет ссылки, поэтому весь «остров» становится недостижимым и будет удалён.
//////////////////////////////////////////////////////////
Основной алгоритм сборки мусора называется «алгоритм пометок» (от англ. «mark-and-sweep»).

Согласно этому алгоритму, сборщик мусора регулярно выполняет следующие шаги:

1)Сборщик мусора «помечает» (запоминает) все корневые объекты.
2)Затем он идёт по ним и «помечает» все ссылки из них.
3)Затем он идёт по отмеченным объектам и отмечает их ссылки. Все посещённые объекты запоминаются, чтобы в будущем не посещать один и тот же объект дважды.
4)…И так далее, пока не будут посещены все достижимые (из корней) ссылки.
5)Все непомеченные объекты удаляются.
////////////////////////////////////////////////////////
Вот некоторые из оптимизаций:

Сборка по поколениям (Generational collection) – объекты делятся на два набора: «новые» и «старые». В типичном коде многие объекты имеют короткую жизнь: они появляются, выполняют свою работу и быстро умирают, так что имеет смысл отслеживать новые объекты и, если это так, быстро очищать от них память. Те, которые выживают достаточно долго, становятся «старыми» и проверяются реже.
Инкрементальная сборка (Incremental collection) – если объектов много, и мы пытаемся обойти и пометить весь набор объектов сразу, это может занять некоторое время и привести к видимым задержкам в выполнения скрипта. Так что движок делит всё множество объектов на части, и далее очищает их одну за другой. Получается несколько небольших сборок мусора вместо одной всеобщей. Это требует дополнительного учёта для отслеживания изменений между частями, но зато получается много крошечных задержек вместо одной большой.
Сборка в свободное время (Idle-time collection) – чтобы уменьшить возможное влияние на производительность, сборщик мусора старается работать только во время простоя процессора.